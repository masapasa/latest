<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Today I learned</title>
<link>https://apyakurel.github.io/til/index.html</link>
<atom:link href="https://apyakurel.github.io/til/index.xml" rel="self" type="application/rss+xml"/>
<description>A collection of Today-I-Learned</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Mon, 21 Nov 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>Creating Nested CLI Commands with argparse</title>
  <link>https://apyakurel.github.io/til/til/sub_cli.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>For the accelerate library we have a variety of commands, such as <code>accelerate config</code>, <code>accelerate launch</code>, etc. However I noticed that some functionality was wanted to write a default config file.</p>
<p>On one hand, I could just do <code>accelerate config --default</code>. But then I’d have to deal with the fact that config is a Q/A interface that doesn’t take parameters, and <code>--default</code> should.</p>
<p>I wanted <code>accelerate config default</code>, and I had to use <code>argparse</code> to get there</p>
</section>
<section id="the-code" class="level2">
<h2 class="anchored" data-anchor-id="the-code">The Code</h2>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>__init__.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># import argparse</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># from command_1 import command_arg_parser</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># from command_2 import subcommand_arg_parser</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># def get_command_parser(subparsers=None):</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#     # Create a base parser to link everything together</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#     parent_parser = argparse.ArgumentParser(add_help=False)</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">#     # Create a main parser that will be the driver</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#     command_parser = command_arg_parser(subparsers)</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">#     # Create a subcommand driver</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;">#     subcommands = command_parser.add_subparsers(</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;">#         title="subcommands", </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;">#         dest="subcommand"</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb1-16">    </span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;">#     # Add the other parsers</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;">#     subcommand_arg_parser(</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;">#         subcommands, </span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;">#         parents=[parent_parser]</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;">#     return command_parser</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># def main():</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;">#     parser = get_command_parser()</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;">#     args = parser.parse_args()</span></span>
<span id="cb1-27">    </span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;"># if __name__ == "__main__":</span></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;">#     main()</span></span></code></pre></div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>__init__.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># import argparse</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># from command_1 import command_arg_parser</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># from command_2 import subcommand_arg_parser</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># def get_command_parser(subparsers=None):</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#     # Create a base parser to link everything together</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#     parent_parser = argparse.ArgumentParser(add_help=False)</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">#     # Create a main parser that will be the driver</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">#     command_parser = command_arg_parser(subparsers)</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">#     # Create a subcommand driver</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">#     subcommands = command_parser.add_subparsers(</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">#         title="subcommands", </span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">#         dest="subcommand"</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb2-16">    </span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;">#     # Add the other parsers</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;">#     subcommand_arg_parser(</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;">#         subcommands, </span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;">#         parents=[parent_parser]</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;">#     return command_parser</span></span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;"># def main():</span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;">#     parser = get_command_parser()</span></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;">#     args = parser.parse_args()</span></span>
<span id="cb2-27">    </span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;"># if __name__ == "__main__":</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;">#     main()</span></span></code></pre></div>
</div>
</div>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"> <span class="im" style="color: #00769E;">from</span> command_1 <span class="im" style="color: #00769E;">import</span> command_arg_parser</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># from command_2 import subcommand_arg_parser</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>Each command part will have its own function that returns an argument parser</p>
</div>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"> <span class="kw" style="color: #003B4F;">def</span> get_command_parser(subparsers<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Similarly we create a function that will return a new parser</p>
</div>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">     parent_parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(add_help<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This will be the “base” parser that will tie everything together. Nothing will get <em>explicitly</em> added here but it will act as the parent for all subcommands</p>
</div>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">     command_parser <span class="op" style="color: #5E5E5E;">=</span> command_arg_parser(subparsers)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This will be our main driver parser.</p>
</div>
<hr>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">     subcommands <span class="op" style="color: #5E5E5E;">=</span> command_parser.add_subparsers(</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#         title="subcommands", </span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#         dest="subcommand"</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#     )</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>This subparser will contain all the subcommands in the style of <code>command_parser_command subcommand</code></p>
</div>
<hr>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">     subcommand_arg_parser(</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">#         subcommands, </span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">#         parents=[parent_parser]</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">#     )</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>We then add the subcommands subparser to the command_arg_parser and pass in the <code>parent_parser</code> as the <em>parents</em> for that parser. (This will make sense in a moment)</p>
</div>
</div>
</div>
</div>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell" data-execution_count="1">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>command_1.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">def</span> command_arg_parser(subparsers<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb9-5">        parser <span class="op" style="color: #5E5E5E;">=</span> subparsers.add_parser(<span class="st" style="color: #20794D;">"command_1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-7">        parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(<span class="st" style="color: #20794D;">"Command 1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span>
<span id="cb9-8">    </span>
<span id="cb9-9">    parser.add_argument(</span>
<span id="cb9-10">        <span class="st" style="color: #20794D;">"--do-the-thing"</span>,</span>
<span id="cb9-11">        default<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb9-12">        <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Whether to do the thing"</span></span>
<span id="cb9-13">    )</span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb9-15">        parser.set_defaults(func<span class="op" style="color: #5E5E5E;">=</span>command_func)</span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">return</span> parser</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="kw" style="color: #003B4F;">def</span> command_func(args):</span>
<span id="cb9-19">    <span class="bu" style="color: null;">print</span>(args)</span></code></pre></div>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell" data-execution_count="1">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>command_1.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">def</span> command_arg_parser(subparsers<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb10-5">        parser <span class="op" style="color: #5E5E5E;">=</span> subparsers.add_parser(<span class="st" style="color: #20794D;">"command_1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb10-7">        parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(<span class="st" style="color: #20794D;">"Command 1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span>
<span id="cb10-8">    </span>
<span id="cb10-9">    parser.add_argument(</span>
<span id="cb10-10">        <span class="st" style="color: #20794D;">"--do-the-thing"</span>,</span>
<span id="cb10-11">        default<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb10-12">        <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Whether to do the thing"</span></span>
<span id="cb10-13">    )</span>
<span id="cb10-14">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb10-15">        parser.set_defaults(func<span class="op" style="color: #5E5E5E;">=</span>command_func)</span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;">return</span> parser</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="kw" style="color: #003B4F;">def</span> command_func(args):</span>
<span id="cb10-19">    <span class="bu" style="color: null;">print</span>(args)</span></code></pre></div>
</div>
</div>
<hr>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> command_arg_parser(subparsers<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-3">        parser <span class="op" style="color: #5E5E5E;">=</span> subparsers.add_parser(<span class="st" style="color: #20794D;">"command_1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb11-5">        parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(<span class="st" style="color: #20794D;">"Command 1"</span>, description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"The first command"</span>)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>We create a new <code>command_arg_parser</code> function that will either add a new <em>parser</em> to the passed in subparser or a new one in general. This is <strong>extremely important</strong></p>
</div>
<hr>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">    parser.add_argument(</span>
<span id="cb12-2">        <span class="st" style="color: #20794D;">"--do-the-thing"</span>,</span>
<span id="cb12-3">        default<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb12-4">        <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Whether to do the thing"</span></span>
<span id="cb12-5">    )</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Then add in arguments like normal</p>
</div>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">    <span class="cf" style="color: #003B4F;">if</span> subparsers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb13-2">        parser.set_defaults(func<span class="op" style="color: #5E5E5E;">=</span>command_func)</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;">return</span> parser</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Set the defaults for the particular parser to be that of the function we intend to call</p>
</div>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> command_func(args):</span>
<span id="cb14-2">    <span class="bu" style="color: null;">print</span>(args)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>The function that will be ran with this particular command, to keep the code clean. Accepts some argument namespace.</p>
</div>
</div>
</div>
</div>
<p>And finally create the last subcommand:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="cell" data-execution_count="2">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>command_2.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># import argparse</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># from .utils import SubcommandHelpFormatter</span></span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># def subcommand_arg_parser(parser, parents):</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">#     parser = parser.add_parser(</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;">#         "command_2", </span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;">#         parents=parents, </span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;">#         help="Command 2 help", </span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;">#         formatter_class=SubcommandHelpFormatter</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;">#     parser.add_argument(</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;">#         "--do-another-thing",</span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;">#         default=None,</span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;">#         help="Whether to do the other thing"</span></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;">#     parser.set_defaults(func=subcommand_func)</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;">#     return parser</span></span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="co" style="color: #5E5E5E;"># def subcommand_func(args):</span></span>
<span id="cb15-20"><span class="co" style="color: #5E5E5E;">#     print(args)</span></span></code></pre></div>
</div>
<div class="cell-output cell-output-error">
<pre><code>ImportError: attempted relative import with no known parent package</code></pre>
</div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="cell" data-execution_count="2">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>command_2.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># import argparse</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># from .utils import SubcommandHelpFormatter</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># def subcommand_arg_parser(parser, parents):</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;">#     parser = parser.add_parser(</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;">#         "command_2", </span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">#         parents=parents, </span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;">#         help="Command 2 help", </span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;">#         formatter_class=SubcommandHelpFormatter</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;">#     parser.add_argument(</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;">#         "--do-another-thing",</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;">#         default=None,</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;">#         help="Whether to do the other thing"</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;">#     parser.set_defaults(func=subcommand_func)</span></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;">#     return parser</span></span>
<span id="cb17-18"></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;"># def subcommand_func(args):</span></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;">#     print(args)</span></span></code></pre></div>
</div>
<div class="cell-output cell-output-error">
<pre><code>ImportError: attempted relative import with no known parent package</code></pre>
</div>
</div>
<hr>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"> <span class="kw" style="color: #003B4F;">def</span> subcommand_arg_parser(parser, parents):</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This function should take in both a parser and the parents for the parser. The latter will help link everything together</p>
</div>
<hr>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">     parser <span class="op" style="color: #5E5E5E;">=</span> parser.add_parser(</span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;">#         "command_2", </span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">#         parents=parents, </span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">#         help="Command 2 help", </span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;">#         formatter_class=SubcommandHelpFormatter</span></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;">#     )</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>We then create a <em>new</em> parser that will act as our subcommand, i.e.&nbsp;<code>command_1 command_2 --args</code></p>
</div>
<hr>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">     parser.add_argument(</span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">#         "--do-another-thing",</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">#         default=None,</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">#         help="Whether to do the other thing"</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">#     parser.set_defaults(func=subcommand_func)</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;">#     return parser</span></span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;"># def subcommand_func(args):</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;">#     print(args)</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>Then add a command and set the default func like before</p>
</div>
</div>
</div>
</div>
<p>Finally the <code>SubcommandHelpFormatter</code>, which just helps make sure that when doing <code>--help</code> it actually looks <em>sound</em> (just trust me on this):</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>utils.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;">class</span> SubcommandHelpFormatter(argparse.RawDescriptionHelpFormatter):</span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;">    A custom formatter that will remove the usage line from the help message for subcommands.</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb22-7"></span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;">def</span> _format_usage(<span class="va" style="color: #111111;">self</span>, usage, actions, groups, prefix):</span>
<span id="cb22-9">        usage <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">super</span>()._format_usage(usage, actions, groups, prefix)</span>
<span id="cb22-10">        usage <span class="op" style="color: #5E5E5E;">=</span> usage.replace(<span class="st" style="color: #20794D;">"&lt;command&gt; [&lt;args&gt;] "</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb22-11">        <span class="cf" style="color: #003B4F;">return</span> usage</span></code></pre></div>
</div>
</div>
<p>Now we can do something like <code>command_1</code> <code>command_2</code> and the <code>--help</code> will show that <code>command_1</code> has a subcommand and this can even be chained infinitely!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="op" style="color: #5E5E5E;">!</span>python3 <span class="fu" style="color: #4758AB;">__init__</span>.py <span class="op" style="color: #5E5E5E;">-</span>h</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>usage: Command 1 [-h] [--do-the-thing DO_THE_THING] {command_2} ...

The first command

optional arguments:
  -h, --help            show this help message and exit
  --do-the-thing DO_THE_THING
                        Whether to do the thing

subcommands:
  {command_2}
    command_2           Command 2 help</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;">!</span>python3 <span class="fu" style="color: #4758AB;">__init__</span>.py command_2 <span class="op" style="color: #5E5E5E;">-</span>h</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>usage: Command 1 command_2 [-h] [--do-another-thing DO_ANOTHER_THING]

optional arguments:
  -h, --help            show this help message and exit
  --do-another-thing DO_ANOTHER_THING
                        Whether to do the other thing</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>cli</category>
  <guid>https://apyakurel.github.io/til/til/sub_cli.html</guid>
  <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://apyakurel.github.io/til/imgs/subsubcommand.png" medium="image" type="image/png" height="51" width="144"/>
</item>
<item>
  <title>Undoing a wrapped function</title>
  <link>https://apyakurel.github.io/til/til/wraps.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>A few days ago there was an issue in Accelerate where a prepared model couldn’t be pickled. At first I thought it had to do with how in Accelerate we have a wrapper function that will make the model return FP32 outputs even on FP16.</p>
<p><img src="https://apyakurel.github.io/til/til/https:/i.kym-cdn.com/entries/icons/original/000/028/596/dsmGaKWMeHXe9QuJtq_ys30PNfTGnMsRuHuo_MUzGCg.jpg" class="img-fluid"></p>
</section>
<section id="the-meat" class="level2">
<h2 class="anchored" data-anchor-id="the-meat">The Meat</h2>
<p>Okay so, let’s pretend we have the following situation in PyTorch:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> MathClass:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;">"A super basic class that performs math"</span></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, a:<span class="bu" style="color: null;">int</span>):</span>
<span id="cb1-4">        <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">=</span> a</span>
<span id="cb1-5">        </span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;">def</span> addition(<span class="va" style="color: #111111;">self</span>, b):</span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.a<span class="op" style="color: #5E5E5E;">+</span>b</span>
<span id="cb1-8">    </span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;">def</span> subtraction(<span class="va" style="color: #111111;">self</span>, b):</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.a<span class="op" style="color: #5E5E5E;">-</span>b</span></code></pre></div>
</div>
<p>Let’s then say that on the <em>addition function</em> of this class, I want to be able to wrap a function that will take the output of <code>addition</code> and divide it by two (logic wise it doesn’t make sense, but code wise it does).</p>
<p>We can use <code>functools.wraps</code> to do this:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> wraps</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> addition_with_div(addition_func):</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">@wraps</span>(addition_func)</span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;">def</span> inner(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb2-6">        result <span class="op" style="color: #5E5E5E;">=</span> addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb2-7">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">return</span> inner</span></code></pre></div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> wraps</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">def</span> addition_with_div(addition_func):</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">@wraps</span>(addition_func)</span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;">def</span> inner(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb3-6">        result <span class="op" style="color: #5E5E5E;">=</span> addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;">return</span> inner</span></code></pre></div>
</div>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="at" style="color: #657422;">@wraps</span>(addition_func)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>A decorator that takes in some function and says that whatever function we have defined under it will be called after the inner function has finished.</p>
</div>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;">def</span> inner(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb5-2">        result <span class="op" style="color: #5E5E5E;">=</span> addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>Inside the function that was decorated we then pass all the args to the original func and return its result divided by 2</p>
</div>
</div>
</div>
</div>
<p>And finally use it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">math <span class="op" style="color: #5E5E5E;">=</span> MathClass(a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb6-2">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span></code></pre></div>
</div>
<p>Now if we try and do <code>math.addition</code> we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">math.addition(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>6.0</code></pre>
</div>
</div>
<p>2 + 10 divided by 2 like we expect! But then what did I have to solve? <strong>Pickling</strong>.</p>
</section>
<section id="pickling-the-beloved-destructor" class="level2">
<h2 class="anchored" data-anchor-id="pickling-the-beloved-destructor">Pickling, the beloved destructor</h2>
<p>Let’s try pickling this (and use torch because I’m lazy):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb9-2">torch.save(math, <span class="st" style="color: #20794D;">"mymaththing.pth"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>PicklingError: Can't pickle &lt;function MathClass.addition at 0x7f00c5a13700&gt;: it's not the same object as __main__.MathClass.addition</code></pre>
</div>
</div>
<p>As you can see, we get this weird pickling error. For the life of me I couldn’t figure out the why, until I finally did.</p>
<p>To save our object, I needed to remove my wrappers I had added, as they weren’t needed in the end result. Here’s how I did so:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb11-2"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> update_wrapper</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">class</span> AdditionWithDiv:</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">    Decorator which will perform addition then divide the result by two</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, addition_func):</span>
<span id="cb11-9">        <span class="va" style="color: #111111;">self</span>.addition_func <span class="op" style="color: #5E5E5E;">=</span> addition_func</span>
<span id="cb11-10">        update_wrapper(<span class="va" style="color: #111111;">self</span>, addition_func)</span>
<span id="cb11-11">    </span>
<span id="cb11-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb11-13">        result <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb11-14">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb11-15"></span>
<span id="cb11-16">    <span class="kw" style="color: #003B4F;">def</span> __getstate__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb11-17">        <span class="cf" style="color: #003B4F;">raise</span> pickle.PicklingError(</span>
<span id="cb11-18">            <span class="st" style="color: #20794D;">"This wrapper cannot be pickled! Remove it before doing so"</span></span>
<span id="cb11-19">        )</span>
<span id="cb11-20">        </span>
<span id="cb11-21">addition_with_div <span class="op" style="color: #5E5E5E;">=</span> AdditionWithDiv</span></code></pre></div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb12-2"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> update_wrapper</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;">class</span> AdditionWithDiv:</span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">    Decorator which will perform addition then divide the result by two</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb12-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, addition_func):</span>
<span id="cb12-9">        <span class="va" style="color: #111111;">self</span>.addition_func <span class="op" style="color: #5E5E5E;">=</span> addition_func</span>
<span id="cb12-10">        update_wrapper(<span class="va" style="color: #111111;">self</span>, addition_func)</span>
<span id="cb12-11">    </span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb12-13">        result <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb12-14">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb12-15"></span>
<span id="cb12-16">    <span class="kw" style="color: #003B4F;">def</span> __getstate__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb12-17">        <span class="cf" style="color: #003B4F;">raise</span> pickle.PicklingError(</span>
<span id="cb12-18">            <span class="st" style="color: #20794D;">"This wrapper cannot be pickled! Remove it before doing so"</span></span>
<span id="cb12-19">        )</span>
<span id="cb12-20">        </span>
<span id="cb12-21">addition_with_div <span class="op" style="color: #5E5E5E;">=</span> AdditionWithDiv</span></code></pre></div>
</div>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, addition_func):</span>
<span id="cb13-2">        <span class="va" style="color: #111111;">self</span>.addition_func <span class="op" style="color: #5E5E5E;">=</span> addition_func</span>
<span id="cb13-3">        update_wrapper(<span class="va" style="color: #111111;">self</span>, addition_func)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>The init function will first store the function and then call <code>functools.update_wrapper</code> and wrap <code>self</code> around <code>addition_func</code>. It’s the same thing that <code>functools.wraps</code> did for us, but we can make use of a custom <code>class</code> instead.</p>
</div>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb14-2">        result <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.addition_func(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb14-3">        <span class="cf" style="color: #003B4F;">return</span> result <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>Here we perform what the <code>inner</code> did earlier, get our result and divide by two</p>
</div>
<hr>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">    <span class="kw" style="color: #003B4F;">def</span> __getstate__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb15-2">        <span class="cf" style="color: #003B4F;">raise</span> pickle.PicklingError(</span>
<span id="cb15-3">            <span class="st" style="color: #20794D;">"This wrapper cannot be pickled! Remove it before doing so"</span></span>
<span id="cb15-4">        )</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This is a very important custom error that will occur when someone tries to pickle this object, letting them know that this shouldn’t happen and cannot be done. This will help not return that weird error as before that tells us nothing.</p>
</div>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">math <span class="op" style="color: #5E5E5E;">=</span> MathClass(a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb16-2">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">torch.save(math, <span class="st" style="color: #20794D;">"mymaththing.pth"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>PicklingError: This wrapper cannot be pickled! Remove it before doing so</code></pre>
</div>
</div>
<p>Better, now to remove the wrapper:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">math <span class="op" style="color: #5E5E5E;">=</span> MathClass(a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb19-2">math._original_addition <span class="op" style="color: #5E5E5E;">=</span> math.addition</span>
<span id="cb19-3">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span>
<span id="cb19-4"></span>
<span id="cb19-5">addition <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(math, <span class="st" style="color: #20794D;">"addition"</span>)</span>
<span id="cb19-6">original_addition <span class="op" style="color: #5E5E5E;">=</span> math.__dict__.pop(<span class="st" style="color: #20794D;">"_original_addition"</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb19-7"><span class="cf" style="color: #003B4F;">if</span> original_addition <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">hasattr</span>(addition, <span class="st" style="color: #20794D;">"__wrapped__"</span>):</span>
<span id="cb19-9">        <span class="cf" style="color: #003B4F;">if</span> addition <span class="op" style="color: #5E5E5E;">!=</span> original_addition:</span>
<span id="cb19-10">            addition <span class="op" style="color: #5E5E5E;">=</span> addition.__wrapped__</span>
<span id="cb19-11">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-12">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb19-13">    math.addition <span class="op" style="color: #5E5E5E;">=</span> addition</span></code></pre></div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">math <span class="op" style="color: #5E5E5E;">=</span> MathClass(a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb20-2">math._original_addition <span class="op" style="color: #5E5E5E;">=</span> math.addition</span>
<span id="cb20-3">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span>
<span id="cb20-4"></span>
<span id="cb20-5">addition <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(math, <span class="st" style="color: #20794D;">"addition"</span>)</span>
<span id="cb20-6">original_addition <span class="op" style="color: #5E5E5E;">=</span> math.__dict__.pop(<span class="st" style="color: #20794D;">"_original_addition"</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb20-7"><span class="cf" style="color: #003B4F;">if</span> original_addition <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb20-8">    <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">hasattr</span>(addition, <span class="st" style="color: #20794D;">"__wrapped__"</span>):</span>
<span id="cb20-9">        <span class="cf" style="color: #003B4F;">if</span> addition <span class="op" style="color: #5E5E5E;">!=</span> original_addition:</span>
<span id="cb20-10">            addition <span class="op" style="color: #5E5E5E;">=</span> addition.__wrapped__</span>
<span id="cb20-11">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb20-12">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb20-13">    math.addition <span class="op" style="color: #5E5E5E;">=</span> addition</span></code></pre></div>
</div>
<hr>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">math <span class="op" style="color: #5E5E5E;">=</span> MathClass(a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb21-2">math._original_addition <span class="op" style="color: #5E5E5E;">=</span> math.addition</span>
<span id="cb21-3">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>We instantiate a new <code>MathClass</code> object and set a reference point to the <em>original</em> addition function we had before wrapping the function in our <code>addition_with_div</code></p>
</div>
<hr>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">addition <span class="op" style="color: #5E5E5E;">=</span> math.addition</span>
<span id="cb22-2">math.addition <span class="op" style="color: #5E5E5E;">=</span> addition_with_div(math.addition)</span>
<span id="cb22-3"></span>
<span id="cb22-4">addition <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(math, <span class="st" style="color: #20794D;">"addition"</span>)</span>
<span id="cb22-5">original_addition <span class="op" style="color: #5E5E5E;">=</span> math.__dict__.pop(<span class="st" style="color: #20794D;">"_original_addition"</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>We need to extract both the wrapped addition function and potentially if we have an <code>_original_addition</code> function if it exists.</p>
</div>
<hr>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">    <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">hasattr</span>(addition, <span class="st" style="color: #20794D;">"__wrapped__"</span>):</span>
<span id="cb23-2">        <span class="cf" style="color: #003B4F;">if</span> addition <span class="op" style="color: #5E5E5E;">!=</span> original_addition:</span>
<span id="cb23-3">            addition <span class="op" style="color: #5E5E5E;">=</span> addition.__wrapped__</span>
<span id="cb23-4">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb23-5">            <span class="cf" style="color: #003B4F;">break</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>We traverse the layers of <code>__wrapped__</code> functions (as this can go to multitudes such as <code>d(c(b(a())))</code>) and if the wrapped addition isn’t the same as the original, get that new reference and keep going</p>
</div>
<hr>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">    math.addition <span class="op" style="color: #5E5E5E;">=</span> addition</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Finally set the function to the found addition</p>
</div>
</div>
</div>
</div>
<p>We now have the old function again and can pickle it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">torch.save(math, <span class="st" style="color: #20794D;">"mymaththing.pth"</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://apyakurel.github.io/til/til/wraps.html</guid>
  <pubDate>Sun, 20 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://i.kym-cdn.com/entries/icons/original/000/028/596/dsmGaKWMeHXe9QuJtq_ys30PNfTGnMsRuHuo_MUzGCg.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mocking internals of a Python Script</title>
  <link>https://apyakurel.github.io/til/til/testing.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>This will be split into two parts. The first contains the contents of some <code>script.py</code> file, which is the base template script we want to use:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> test_function(): </span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb1-5">    result <span class="op" style="color: #5E5E5E;">=</span> test_function()</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb1-7">        f.write(<span class="bu" style="color: null;">str</span>(result))</span>
<span id="cb1-8">        </span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb1-10">    main()</span></code></pre></div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> test_function(): </span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb2-5">    result <span class="op" style="color: #5E5E5E;">=</span> test_function()</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb2-7">        f.write(<span class="bu" style="color: null;">str</span>(result))</span>
<span id="cb2-8">        </span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb2-10">    main()</span></code></pre></div>
</div>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> test_function(): </span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>This is the function whose behavior we want to override during our mock</p>
</div>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb4-2">    result <span class="op" style="color: #5E5E5E;">=</span> test_function()</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb4-4">        f.write(<span class="bu" style="color: null;">str</span>(result))</span></code></pre></div>
<div style="padding-top: 0px;">
<p>The main function is what we will call when running the python script. This will write a string representation of <code>test_function()</code> to a file.</p>
</div>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb5-2">    main()</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This is a blocker to ensure that if anyone imports or calls this python script that it will be ran explicitly.</p>
</div>
</div>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
File Structure
</div>
</div>
<div class="callout-body-container callout-body">
<p>It should be assumed that for the next part the structure of the code files are as such:</p>
<ul>
<li><code>base_repository</code>
<ul>
<li><code>example</code>
<ul>
<li><code>script.py</code></li>
</ul></li>
<li><code>tests</code>
<ul>
<li><code>test_script.py</code></li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Code + Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">import</span> unittest</span>
<span id="cb6-4"><span class="im" style="color: #00769E;">from</span> unittest <span class="im" style="color: #00769E;">import</span> mock</span>
<span id="cb6-5">SRC_DIRS <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb6-6">    os.path.join(</span>
<span id="cb6-7">        os.path.dirname(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">"example"</span></span>
<span id="cb6-8">    )</span>
<span id="cb6-9">]</span>
<span id="cb6-10">sys.path.extend(SRC_DIRS)</span>
<span id="cb6-11"><span class="cf" style="color: #003B4F;">if</span> SRC_DIRS <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb6-12">    <span class="im" style="color: #00769E;">import</span> script</span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;">def</span> new_function():</span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;">@mock.patch</span>(<span class="st" style="color: #20794D;">"script.test_function"</span>, new_function)</span>
<span id="cb6-16"><span class="kw" style="color: #003B4F;">class</span> ExampleTester(unittest.TestCase):</span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;">def</span> test_example(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb6-18">        script.main()</span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb6-20">            lines <span class="op" style="color: #5E5E5E;">=</span> f.read()</span>
<span id="cb6-21">        <span class="va" style="color: #111111;">self</span>.assertEquals(lines, <span class="st" style="color: #20794D;">"0"</span>)</span></code></pre></div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">import</span> unittest</span>
<span id="cb7-4"><span class="im" style="color: #00769E;">from</span> unittest <span class="im" style="color: #00769E;">import</span> mock</span>
<span id="cb7-5">SRC_DIRS <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb7-6">    os.path.join(</span>
<span id="cb7-7">        os.path.dirname(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">"example"</span></span>
<span id="cb7-8">    )</span>
<span id="cb7-9">]</span>
<span id="cb7-10">sys.path.extend(SRC_DIRS)</span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;">if</span> SRC_DIRS <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb7-12">    <span class="im" style="color: #00769E;">import</span> script</span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">def</span> new_function():</span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-15"><span class="at" style="color: #657422;">@mock.patch</span>(<span class="st" style="color: #20794D;">"script.test_function"</span>, new_function)</span>
<span id="cb7-16"><span class="kw" style="color: #003B4F;">class</span> ExampleTester(unittest.TestCase):</span>
<span id="cb7-17">    <span class="kw" style="color: #003B4F;">def</span> test_example(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-18">        script.main()</span>
<span id="cb7-19">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb7-20">            lines <span class="op" style="color: #5E5E5E;">=</span> f.read()</span>
<span id="cb7-21">        <span class="va" style="color: #111111;">self</span>.assertEquals(lines, <span class="st" style="color: #20794D;">"0"</span>)</span></code></pre></div>
</div>
<hr>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb8-2"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb8-3"><span class="im" style="color: #00769E;">import</span> unittest</span>
<span id="cb8-4"><span class="im" style="color: #00769E;">from</span> unittest <span class="im" style="color: #00769E;">import</span> mock</span></code></pre></div>
<div style="padding-top: 0px;">
<p>These are the imports we use</p>
</div>
<hr>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">SRC_DIRS <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb9-2">    os.path.join(</span>
<span id="cb9-3">        os.path.dirname(<span class="va" style="color: #111111;">__file__</span>), <span class="st" style="color: #20794D;">"example"</span></span>
<span id="cb9-4">    )</span>
<span id="cb9-5">]</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This is a list of directories that have our script source code relative to the current file. In this case the <code>example</code> directory.</p>
</div>
<hr>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sys.path.extend(SRC_DIRS)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>We add in our new SRC_DIRS to the sys.path which allows them to be imported through an import statement such as import script</p>
</div>
<hr>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;">if</span> SRC_DIRS <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-2">    <span class="im" style="color: #00769E;">import</span> script</span></code></pre></div>
<div style="padding-top: 0px;">
<p>If the file exists (this makes it modular) go ahead and import it</p>
</div>
<hr>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;">def</span> new_function():</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
<div style="padding-top: 0px;">
<p>This is the new function we will use to replace the <code>test_function</code> in our python script</p>
</div>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="at" style="color: #657422;">@mock.patch</span>(<span class="st" style="color: #20794D;">"script.test_function"</span>, new_function)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>This uses <code>unittest.mock</code> to mokey-patch and override the original <code>test_function</code> in the existing module with the new one we just defined. Calling <code>script.test_function()</code> will call <code>new_function()</code> as a result</p>
</div>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">class</span> ExampleTester(unittest.TestCase):</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;">def</span> test_example(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb14-3">        script.main()</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Calls the main function in our tester, but uses our <code>new_function()</code> when called</p>
</div>
<hr>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"someFile.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb15-2">            lines <span class="op" style="color: #5E5E5E;">=</span> f.read()</span>
<span id="cb15-3">        <span class="va" style="color: #111111;">self</span>.assertEquals(lines, <span class="st" style="color: #20794D;">"0"</span>)</span></code></pre></div>
<div style="padding-top: 0px;">
<p>Tests that the file which was written to has the properly mocked version of it, or 0</p>
</div>
</div>
</div>
</div>



 ]]></description>
  <category>python</category>
  <category>testing</category>
  <guid>https://apyakurel.github.io/til/til/testing.html</guid>
  <pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://apyakurel.github.io/til/imgs/mocking.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>The Code Review Pyramid</title>
  <link>https://apyakurel.github.io/til/til/code_review.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="what-is-it" class="level2">
<h2 class="anchored" data-anchor-id="what-is-it">What is it?</h2>
<p>This is a graphic written by Gunnar Morling on what is described as the “Code Review Pyramid.” It’s split into five “layers” that I’ll quickly describe.</p>
<p><img src="https://apyakurel.github.io/til/til/https:/user-images.githubusercontent.com/7831895/202606723-e60cc94e-6c6b-420c-99a0-5e11ea34aca8.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>general</category>
  <guid>https://apyakurel.github.io/til/til/code_review.html</guid>
  <pubDate>Fri, 18 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://user-images.githubusercontent.com/7831895/202606723-e60cc94e-6c6b-420c-99a0-5e11ea34aca8.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
